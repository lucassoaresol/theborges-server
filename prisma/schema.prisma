generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  username  String   @unique
  password  String
  isAdm     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  professional  Professional?
  refreshTokens RefreshToken[]

  @@map("accounts")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  accountId Int
  issuedAt  DateTime @default(now())
  expiresAt DateTime

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Client {
  id              Int      @id @default(autoincrement())
  name            String
  phone           String   @unique
  email           String   @unique
  birthDay        Int?
  birthMonth      Int?
  wantsPromotions Boolean  @default(true)
  publicId        String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  bookingCart BookingCart?
  bookings    Booking[]

  @@map("clients")
}

enum BookingStatus {
  CONFIRMED
  COMPLETED
  CANCELLED
  RESCHEDULED
  NO_SHOW
}

model Booking {
  id             Int           @id @default(autoincrement())
  date           DateTime
  startTime      Int
  endTime        Int
  status         BookingStatus @default(CONFIRMED)
  forPersonName  String?
  publicId       String        @unique
  clientId       Int
  professionalId Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt

  client       Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  professional Professional     @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  services     BookingService[]

  @@map("bookings")
}

model BookingService {
  id        Int      @id @default(autoincrement())
  price     Float
  bookingId Int
  serviceId Int
  order     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("booking_services")
}

model Service {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  description     String
  durationMinutes Int
  price           Float
  color           String
  categoryId      Int
  isAdditional    Boolean  @default(false)
  additionalPrice Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  category            Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  bookingServices     BookingService[]
  bookingCartServices BookingCartService[]

  @@map("services")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  color     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  services Service[]

  @@map("categories")
}

model OperatingHours {
  id        Int      @id @default(autoincrement())
  dayOfWeek Int
  time      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("operating_hours")
}

model HolidayException {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  isClosed  Boolean  @default(false)
  time      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  professionals ProfessionalOnHolidayException[]

  @@map("holiday_exceptions")
}

model WorkingDay {
  key            Int      @default(autoincrement())
  professionalId Int
  date           DateTime
  time           Json?
  isClosed       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@id([professionalId, date])
  @@map("working_days")
}

model Professional {
  id        Int      @id @default(autoincrement())
  accountId Int      @unique
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  account           Account                          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  bookings          Booking[]
  bookingCarts      BookingCart[]
  workingDays       WorkingDay[]
  holidayExceptions ProfessionalOnHolidayException[]

  @@map("professionals")
}

model ProfessionalOnHolidayException {
  key                Int      @default(autoincrement())
  professionalId     Int
  holidayExceptionId Int
  createdAt          DateTime @default(now())

  professional     Professional     @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  holidayException HolidayException @relation(fields: [holidayExceptionId], references: [id], onDelete: Cascade)

  @@id([professionalId, holidayExceptionId])
  @@map("professional_on_holiday_exception")
}

model Config {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@map("configs")
}

model MessageTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  body        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@map("message_templates")
}

model BookingCart {
  id             Int       @id @default(autoincrement())
  selectedDate   DateTime?
  startTime      Int?
  endTime        Int?
  professionalId Int?
  clientId       Int       @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt

  client       Client               @relation(fields: [clientId], references: [id], onDelete: Cascade)
  professional Professional?        @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  services     BookingCartService[]

  @@map("booking_carts")
}

model BookingCartService {
  id        Int      @id @default(autoincrement())
  cartId    Int
  serviceId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  cart    BookingCart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  service Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("booking_cart_services")
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED

  @@map("notification_status")
}

model NotificationQueue {
  id            Int                @id @default(autoincrement())
  clientId      String             @map("client_id")
  chatId        String             @map("chat_id")
  message       String
  status        NotificationStatus @default(PENDING)
  attemptCount  Int                @default(0) @map("attempt_count")
  scheduledTime DateTime?          @map("scheduled_time")
  sentAt        DateTime?          @map("sent_at")
  error         Json?
  bookingId     Int?               @map("booking_id")
  createdAt     DateTime?          @map("created_at")
  updatedAt     DateTime?          @map("updated_at")

  @@map("notification_queue")
}
